// <auto-generated />
using System;
using DreamCar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DreamCar.Migrations
{
    [DbContext(typeof(DreamCarContext))]
    [Migration("20220509221951_IntialCreate")]
    partial class IntialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DreamCar.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarAuthor")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("CarCapacity")
                        .HasColumnType("int");

                    b.Property<string>("CarCity")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarColor")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarCountry")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarFuel")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarGearbox")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("CarIsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("CarIsSold")
                        .HasColumnType("bit");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("CarPrice")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("CarProdYear")
                        .HasColumnType("int");

                    b.Property<string>("CarReservationDateEnd")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarReservationDateStart")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CarTags")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("DreamCar.Models.Favourite", b =>
                {
                    b.Property<int>("FavouriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("FavouriteAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FavouriteId");

                    b.HasIndex("CarId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("DreamCar.Models.Publication", b =>
                {
                    b.Property<int>("PublishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("PublishAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublishId");

                    b.HasIndex("CarId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("DreamCar.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("ReservationAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.HasIndex("CarId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("DreamCar.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserCity")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserCountry")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserUsername")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DreamCar.Models.Car", b =>
                {
                    b.HasOne("DreamCar.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamCar.Models.Favourite", b =>
                {
                    b.HasOne("DreamCar.Models.Car", "Car")
                        .WithMany("Favourites")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamCar.Models.Publication", b =>
                {
                    b.HasOne("DreamCar.Models.Car", "Car")
                        .WithMany("Publications")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DreamCar.Models.Reservation", b =>
                {
                    b.HasOne("DreamCar.Models.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
